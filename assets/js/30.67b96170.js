(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{299:function(t,e,r){"use strict";r.r(e);var s=r(38),v=Object(s.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p",[t._v("js中判断相等有两种方法，一个是"),r("code",[t._v("==")]),t._v("操作符，还有一个是"),r("code",[t._v("===")]),t._v("操作符，这两个有什么区别呢？")]),t._v(" "),r("p",[t._v("可以这么认为:")]),t._v(" "),r("ul",[r("li",[r("code",[t._v("===")]),t._v("是严格相等，左右两边不仅值要相等，类型也要相等。")]),t._v(" "),r("li",[r("code",[t._v("==")]),t._v("是抽象相等，只要值相等，就会返回true，但是在比较的过程中会涉及到类型转换。")])]),t._v(" "),r("h2",{attrs:{id:"严格相等"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#严格相等","aria-hidden":"true"}},[t._v("#")]),t._v(" 严格相等 ===")]),t._v(" "),r("p",[t._v("先看===内部是如何进行比较的，先来看"),r("code",[t._v("ECMA")]),t._v("上的定义")]),t._v(" "),r("blockquote",[r("p",[t._v("The comparison x === y, where x and y are values, produces true or false. Sucna comparison is performed as follows:")]),t._v(" "),r("ul",[r("li",[r("ol",[r("li",[t._v("If Type(x) is different from Type(y), return false.")])])]),t._v(" "),r("li",[r("ol",{attrs:{start:"2"}},[r("li",[t._v("If Type(x) is Number, then")])]),t._v(" "),r("ul",[r("li",[t._v("2.1. If x is NaN, return false.")]),t._v(" "),r("li",[t._v("2.2. If y is NaN, return false.")]),t._v(" "),r("li",[t._v("2.3. If x is the same Number value as y, return true.")]),t._v(" "),r("li",[t._v("2.4. If x is +0 and y is -0, return true.")]),t._v(" "),r("li",[t._v("2.5. If x is -0 and y is +0, return true.")]),t._v(" "),r("li",[t._v("2.6. Return false.")])])])]),t._v(" "),r("ol",{attrs:{start:"3"}},[r("li",[t._v("Return SameValueNonNumber(x, y).")])]),t._v(" "),r("p",[t._v("NOTE This algorithm differs from the SameValue Algorithm in its treatment of signed zeroes and NaNs.")])]),t._v(" "),r("ul",[r("li",[r("ol",[r("li",[t._v("如果x和y的类型不同，返回false")])])]),t._v(" "),r("li",[r("ol",{attrs:{start:"2"}},[r("li",[t._v("如果x为"),r("code",[t._v("Number")]),t._v("类型，那么：")])]),t._v(" "),r("ul",[r("li",[t._v("2.1. 如果x为"),r("code",[t._v("NaN")]),t._v("，返回false")]),t._v(" "),r("li",[t._v("2.2. 如果y为"),r("code",[t._v("NaN")]),t._v("，返回false")]),t._v(" "),r("li",[t._v("2.3. 如果x和y的数值相等，返回true")]),t._v(" "),r("li",[t._v("2.4. 如果x为"),r("code",[t._v("+0")]),t._v("并且y为"),r("code",[t._v("-0")]),t._v("，返回true")]),t._v(" "),r("li",[t._v("2.5. 如果x为"),r("code",[t._v("-0")]),t._v("并且y为"),r("code",[t._v("+0")]),t._v("，返回true")]),t._v(" "),r("li",[t._v("2.6. 其余的返回false")])])])]),t._v(" "),r("p",[t._v("注意： 该算法和同值算法的区别在于对有符号的0和NaN的处理。")]),t._v(" "),r("p",[t._v("通过"),r("code",[t._v("ECMA")]),t._v("的定义可以发现，"),r("code",[t._v("===")]),t._v("与我们所认知的是一样的，类型与值同时相等才返回true，但是要注意的是，它并不能正确的判断"),r("code",[t._v("+0")]),t._v("和"),r("code",[t._v("-0")]),t._v("，还有"),r("code",[t._v("NaN")]),t._v("的相等。那么要怎么正确判断"),r("code",[t._v("+0")]),t._v("和"),r("code",[t._v("-0")]),t._v("，还有"),r("code",[t._v("NaN")]),t._v("的比较呢，可以通过"),r("code",[t._v("Object.is")]),t._v("来判断。")]),t._v(" "),r("div",{staticClass:"language-js line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[t._v("Object"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("is")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nObject"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("is")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br")])]),r("p",[t._v("关于"),r("code",[t._v("===")]),t._v("的内容就这么多，下面来看"),r("code",[t._v("==")]),t._v("的问题")]),t._v(" "),r("h2",{attrs:{id:"抽象相等"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#抽象相等","aria-hidden":"true"}},[t._v("#")]),t._v(" 抽象相等 ==")]),t._v(" "),r("p",[t._v("同样，我们先看ECMA上对==的定义是怎样的")]),t._v(" "),r("blockquote",[r("p",[t._v("The comparison x == y, where x and y are values, produces true of false, Such a comparison is performed as follows:")]),t._v(" "),r("ul",[r("li",[r("ol",[r("li",[t._v("If Type(x) is the same as Type(y), then")])]),t._v(" "),r("ul",[r("li",[t._v("1.1 Return the result of performing Strict Equality Comparison x === y.")])])]),t._v(" "),r("li",[r("ol",{attrs:{start:"2"}},[r("li",[t._v("If x is null and y is undefined, return true.")])])]),t._v(" "),r("li",[r("ol",{attrs:{start:"3"}},[r("li",[t._v("If x is undefined and y is null, return ture.")])])]),t._v(" "),r("li",[r("ol",{attrs:{start:"4"}},[r("li",[t._v("If Type(x) is Number and Type(y) is String, return the result of the comparison x === ToNumber(y).")])])]),t._v(" "),r("li",[r("ol",{attrs:{start:"5"}},[r("li",[t._v("If Type(x) is String and Type(y) is Number, return the result of the comparison ToNumber(x) == y.")])])]),t._v(" "),r("li",[r("ol",{attrs:{start:"6"}},[r("li",[t._v("If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y.")])])]),t._v(" "),r("li",[r("ol",{attrs:{start:"7"}},[r("li",[t._v("If Type(y) is Boolean, return the result of the comparison x == ToNumber(y).")])])]),t._v(" "),r("li",[r("ol",{attrs:{start:"8"}},[r("li",[t._v("If Type(x) is either String, Number, or Symbol and Type(y) is Object, return the result of the comparison x == ToPrimitive(y).")])])]),t._v(" "),r("li",[r("ol",{attrs:{start:"9"}},[r("li",[t._v("If Type(x) is Object and Type(y) is either String, Number, or Symbol, return the result of the comparison ToPrimitive(x) == y.")])])]),t._v(" "),r("li",[r("ol",{attrs:{start:"10"}},[r("li",[t._v("Return false.")])])])])]),t._v(" "),r("ol",[r("li",[t._v("如果x和y的类型相同，则返回"),r("code",[t._v("x === y")]),t._v("的结果")]),t._v(" "),r("li",[t._v("如果x为"),r("code",[t._v("null")]),t._v("并且y为"),r("code",[t._v("undefined")]),t._v("，返回true.")]),t._v(" "),r("li",[t._v("如果x为"),r("code",[t._v("undefined")]),t._v("并且y为"),r("code",[t._v("null")]),t._v("，返回true.")]),t._v(" "),r("li",[t._v("如果x为"),r("code",[t._v("Number")]),t._v("类型并且y为"),r("code",[t._v("String")]),t._v("类型，返回"),r("code",[t._v("x == ToNumber(y)")]),t._v("的结果.")]),t._v(" "),r("li",[t._v("如果x为"),r("code",[t._v("String")]),t._v("类型并且y为"),r("code",[t._v("Number")]),t._v("类型，返回"),r("code",[t._v("ToNumber(x) == y")]),t._v("的结果.")]),t._v(" "),r("li",[t._v("如果x为"),r("code",[t._v("Boolean")]),t._v("类型，返回"),r("code",[t._v("ToNumber(x) == y")]),t._v("的结果.")]),t._v(" "),r("li",[t._v("如果y为"),r("code",[t._v("Boolean")]),t._v("类型，返回"),r("code",[t._v("x == ToNumber(y)")]),t._v("的结果.")]),t._v(" "),r("li",[t._v("如果x为"),r("code",[t._v("String")]),t._v("、"),r("code",[t._v("Number")]),t._v("或"),r("code",[t._v("Symbol")]),t._v("类型的其中一种，并且y为"),r("code",[t._v("Object")]),t._v("类型，返回"),r("code",[t._v("x == ToPrimitive(y)")]),t._v("的结果.")]),t._v(" "),r("li",[t._v("如果x为"),r("code",[t._v("Object")]),t._v("类型并且y为"),r("code",[t._v("String")]),t._v("、"),r("code",[t._v("Number")]),t._v("或"),r("code",[t._v("Symbol")]),t._v("类型的其中一种，返回"),r("code",[t._v("ToPrimitive(x) == y")]),t._v("的结果.")]),t._v(" "),r("li",[t._v("其余的返回false.")])]),t._v(" "),r("p",[r("strong",[t._v("可以看到"),r("code",[t._v("==")]),t._v("的定义极其的复杂。。我们先对上述的定义进行整理，可以得到这样简化后的定义：")])]),t._v(" "),r("ol",[r("li",[t._v("同时存在"),r("code",[t._v("null")]),t._v("和"),r("code",[t._v("undefined")]),t._v("的情况下，都返回true.")]),t._v(" "),r("li",[t._v("同时存在"),r("code",[t._v("Number")]),t._v("和"),r("code",[t._v("String")]),t._v("的情况下，会先将"),r("code",[t._v("String")]),t._v("类型用"),r("code",[t._v("ToNumber")]),t._v("操作转换类型后再次比较.")]),t._v(" "),r("li",[t._v("有"),r("code",[t._v("Boolean")]),t._v("类型的情况下，先将"),r("code",[t._v("Boolean")]),t._v("类型用"),r("code",[t._v("ToNumber")]),t._v("操作转换类型后再次比较.")]),t._v(" "),r("li",[t._v("若一方为"),r("code",[t._v("Object")]),t._v("类型，另一方为"),r("code",[t._v("String")]),t._v("、"),r("code",[t._v("Number")]),t._v("或"),r("code",[t._v("Symbol")]),t._v("类型的其中一种，先将"),r("code",[t._v("Object")]),t._v("类型使用"),r("code",[t._v("ToPrimitive")]),t._v("操作转换类型后再次比较.")])]),t._v(" "),r("p",[t._v("通过简化后的定义，我们发现这几个重要操作：")]),t._v(" "),r("ul",[r("li",[t._v("ToNumber()")]),t._v(" "),r("li",[t._v("ToPrimitive()")])]),t._v(" "),r("h3",{attrs:{id:"tonumber"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tonumber","aria-hidden":"true"}},[t._v("#")]),t._v(" ToNumber()")]),t._v(" "),r("p",[t._v("在ECMA上各个类型使用ToNumber返回的值如下表")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("初始类型")]),t._v(" "),r("th",[t._v("返回结果")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("Undefined")]),t._v(" "),r("td",[t._v("NaN")])]),t._v(" "),r("tr",[r("td",[t._v("Null")]),t._v(" "),r("td",[t._v("+0")])]),t._v(" "),r("tr",[r("td",[t._v("Boolean")]),t._v(" "),r("td",[t._v("初始值为true返回1，false返回+0")])]),t._v(" "),r("tr",[r("td",[t._v("Number")]),t._v(" "),r("td",[t._v("返回初始值")])]),t._v(" "),r("tr",[r("td",[t._v("String")]),t._v(" "),r("td",[r("strong",[t._v("特殊转换规则")])])]),t._v(" "),r("tr",[r("td",[t._v("Symbol")]),t._v(" "),r("td",[t._v("抛出TypeError错误")])]),t._v(" "),r("tr",[r("td",[t._v("Object")]),t._v(" "),r("td",[r("strong",[t._v("1. Let primValue be? ToPrimitive(argument, hint Number). 2.Return ? ToNumber(primValue).")])])])])]),t._v(" "),r("p",[t._v("ToNumber中的String和Object类型没看懂具体的转换规则是怎样的😭")]),t._v(" "),r("h3",{attrs:{id:"toprimitive"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#toprimitive","aria-hidden":"true"}},[t._v("#")]),t._v(" ToPrimitive()")]),t._v(" "),r("p",[t._v("这个在ECMA上的定义也很复杂，我在一篇文章上看到了对它的一个总结：")]),t._v(" "),r("blockquote",[r("ol",[r("li",[t._v("ToPrimitive(input, hint)转换为原始类型的方法，根据hint目标类型进行转换。")]),t._v(" "),r("li",[t._v("hint只有两个值：String和Number")]),t._v(" "),r("li",[t._v("如果没有传入hint，Date类型的input的hint默认为String，其他类型的input的hint默认为Number")]),t._v(" "),r("li",[t._v("Number类型先判断valueOf()方法的返回值，如果不是，再判断toString()方法的返回值")]),t._v(" "),r("li",[t._v("String类型先判断toString()方法的返回值，如果不是，再判断valueOf()方法的返回值")])])]),t._v(" "),r("h2",{attrs:{id:"题目"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#题目","aria-hidden":"true"}},[t._v("#")]),t._v(" 题目")]),t._v(" "),r("p",[t._v("根据上面的知识点，来尝试解答一道题： 为什么"),r("code",[t._v("[] == ![]")]),t._v("返回true？")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("一元运算符优先级比相等操作符的优先级高，所以先计算![]，得到的结果为false\n"),r("code",[t._v("[] == false")])])]),t._v(" "),r("li",[r("p",[t._v("一边有Boolean类型的时候，先将Boolean转成Number类型，false转成Number得到结果为0\n"),r("code",[t._v("[] == 0")])])]),t._v(" "),r("li",[r("p",[t._v("当一边为Object类型，另一边为Number类型时，先根据ToPrimitive()将Object类型转为原始值，先执行valueOf方法，[].valueOf得到的结果还是 [],再执行toString方法，得到''\n"),r("code",[t._v("'' == 0")])])]),t._v(" "),r("li",[r("p",[t._v("当一边为String，另一边为Number时，将String转为Number，''字符串转为Number得到0\n"),r("code",[t._v("0 == 0")])])]),t._v(" "),r("li",[r("p",[t._v("有上面过程可得出"),r("code",[t._v("[] == ![]")])])])]),t._v(" "),r("h2",{attrs:{id:"扩展"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#扩展","aria-hidden":"true"}},[t._v("#")]),t._v(" 扩展")]),t._v(" "),r("p",[t._v("从上面对ToPrimitive的定义我们可以知道，Object转为原始值，是先调用"),r("code",[t._v("valueOf()")]),t._v("方法，但是在es6中多了symbol类型，在Object类型有"),r("code",[t._v("Symbol.toPrimitive()")]),t._v("方法的情况下，会先调用该方法，代码如下")]),t._v(" "),r("div",{staticClass:"language-js line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  value"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'5'")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toPrimitive"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出7")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br"),r("span",{staticClass:"line-number"},[t._v("8")]),r("br"),r("span",{staticClass:"line-number"},[t._v("9")]),r("br"),r("span",{staticClass:"line-number"},[t._v("10")]),r("br"),r("span",{staticClass:"line-number"},[t._v("11")]),r("br"),r("span",{staticClass:"line-number"},[t._v("12")]),r("br"),r("span",{staticClass:"line-number"},[t._v("13")]),r("br")])]),r("h2",{attrs:{id:"参考链接"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考链接","aria-hidden":"true"}},[t._v("#")]),t._v(" 参考链接")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://juejin.im/entry/584918612f301e005716add6",target:"_blank",rel:"noopener noreferrer"}},[t._v("js 中 == 和 === 的区别"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence",target:"_blank",rel:"noopener noreferrer"}},[t._v("运算符优先级"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/7.0/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMA"),r("OutboundLink")],1)])])},[],!1,null,null,null);e.default=v.exports}}]);